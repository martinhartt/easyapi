{"version":3,"sources":["webpack:///webpack/bootstrap 5590240ed4cc4a423952","webpack:///external \"express\"","webpack:///./src/models/index.js","webpack:///./src/index.js","webpack:///./src/config/bootstrap.js","webpack:///./src/config/connections.js","webpack:///./src/routes/index.js","webpack:///./src/routes/service.js","webpack:///./src/services/natural.js","webpack:///external \"body-parser\"","webpack:///external \"fs\"","webpack:///external \"natural\"","webpack:///external \"nlp_compromise\"","webpack:///external \"path\"","webpack:///external \"pos\"","webpack:///external \"request-promise\"","webpack:///external \"sbd\"","webpack:///external \"sequelize\""],"names":["basename","path","__filename","env","process","NODE_ENV","db","config","connections","sequelize","use_env_variable","database","username","password","console","log","__dirname","fs","readdirSync","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate","Sequelize","bootstrap","then","app","Express","port","models","sync","use","bodyParser","json","req","res","next","err","Error","status","locals","message","error","get","render","listen","catch","Promise","resolve","development","host","dialect","test","production","router","Router","send","User","findAll","include","users","post","text","param","Natural","generateModelStructure","result","parseResult","parse","modelStructure","allEntities","sentenceResult","data","potentialRelationships","parse_list","word","POS_coarse","tokens","treeIndex","token","find","parse_tree","obj","relationship","inTree","subject","modifiers","o","arc","object","properties","getConjuctions","entities","propertiesWithTypes","property","push","categoriseProp","entity","existingEntity","s","lemma","concat","raw","postprocess","tokenizer","tagger","seperateSentences","sentenceTokenizer","tokenize","findPartsOfSpeech","tag","request","form","split","JSON","condition","length","child","found","decide","values","average","value","Number","findRequired","prop","context","optionalKeywords","requiredKeywords","allRequiredInformation","monads","monad","k","findMultiple","determiners","adjModifiers","numModifiers","combined","POS_fine","allCardinalityInfo","modifier","singleKeywords","multipleKeywords","number","parseInt","isNaN","propertyName","multiple","correctedNoun","compromise","noun","pluralize","singularize","compounds","m","map","c","presentVerb","verb","to_present","capitalizeWord","str","charAt","toUpperCase","propertyType","hasMultiple","type","required","conjunction","deeperConjuctions"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5590240ed4cc4a423952","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 0\n// module chunks = 0","import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport connections from '../config/connections';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || 'development';\nconst db = {};\n\nconst config = connections[env];\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable]);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\n\nconsole.log('?', __dirname);\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js'))\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/index.js","import Express from 'express';\nimport bodyParser from 'body-parser';\nimport index from './routes/index';\nimport service from './routes/service';\nimport bootstrap from './config/bootstrap';\nimport models from './models';\n\nbootstrap().then(async () => {\n  /* eslint-disable new-cap */\n  const app = Express();\n  const port = 9001;\n\n  await models.sequelize.sync();\n\n  app.use(bodyParser.json());\n\n  app.use('/api', index);\n  app.use('/api/service', service);\n\n  // catch 404 and forward to error handler\n  app.use((req, res, next) => {\n    const err = new Error('Not Found!');\n    err.status = 404;\n    next(err);\n  });\n\n  // error handler\n  app.use((err, req, res) => {\n    // set locals, only providing error in development\n    /* eslint-disable no-param-reassign */\n    res.locals.message = err.message;\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n    // render the error page\n    res.status(err.status || 500);\n    res.render('error');\n  });\n\n  app.listen(port);\n  console.log(`Server is running on port ${port}`);\n})\n.catch(err => console.error(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * Bootstrap: All scripts that should be executed before server starts running\n */\n\nexport default function bootstrap() {\n  return Promise.resolve();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/bootstrap.js","const connections = {\n  development: {\n    username: 'martinkubat',\n    password: '',\n    database: 'martinkubat',\n    host: 'localhost',\n    dialect: 'postgres',\n  },\n  test: {\n    username: 'root',\n    password: null,\n    database: 'database_test',\n    host: '127.0.0.1',\n    dialect: 'mysql',\n  },\n  production: {\n    username: 'root',\n    password: null,\n    database: 'database_production',\n    host: '127.0.0.1',\n    dialect: 'mysql',\n  },\n};\n\nexport default connections;\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/connections.js","import { Router } from 'express';\nimport { User, Service } from '../models';\n\n/* eslint-disable new-cap */\nconst router = Router();\n\n/* GET index. */\nrouter.get('/', (req, res) => {\n  res.send('Hello ok yep!');\n});\n\nrouter.get('/models', (req, res) => {\n  User.findAll({\n    include: [Service],\n  }).then((users) => {\n    res.send(users);\n  });\n});\n\nexport default router;\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/index.js","import { Router } from 'express';\nimport Natural from '../services/natural';\n\n/* eslint-disable new-cap */\nconst router = Router();\n\n/* POST scratch. */\nrouter.post('/scratch', (req, res) => {\n  const text = req.param('text');\n  Natural.generateModelStructure(text)\n  .then((result) => {\n    res.send(result);\n  });\n});\n\nexport default router;\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/service.js","import request from 'request-promise';\nimport compromise from 'nlp_compromise';\n\n/**\n * Natural Service: A service for extracting information from natural speech.\n */\nimport { sentences as sentenceTokenizer } from 'sbd';\nimport { WordTokenizer } from 'natural';\n// import WordNet from 'node-wordnet';\nimport { Tagger } from 'pos';\n\nconst tokenizer = new WordTokenizer();\n// const wordNet = new WordNet();\nconst tagger = new Tagger();\n\n// Seperates a text into seperate sentences\nfunction seperateSentences(text) {\n  return sentenceTokenizer(text); // text.split(/\\. ?/);\n}\n\n// Splits text into seperate tokens\nfunction tokenize(text) {\n  return tokenizer.tokenize(text);\n}\n\nfunction findPartsOfSpeech(tokens) {\n  return tagger.tag(tokens);\n}\n\n// async function wordNetDefinition(word: string, pos: string, context: [string]) {\n//   const results = await wordNet.lookupAsync(word);\n//\n//   // Find most likely definition from context array and pos\n//   const simplePOS = pos[0].toLowerCase();\n//   const filteredResults = results\n//     .filter(r => r.pos === simplePOS)\n//     .filter(r => r.lemma === word);\n//\n//   if (context) {\n//     const documentSearch = new TfIdf();\n//\n//     // TODO Stem words from definition and context\n//     filteredResults.forEach(result => documentSearch.addDocument(result.gloss));\n//\n//     let highestMeasure = -1;\n//     let mostLikelyResult;\n//     documentSearch.tfidfs(context, (i, measure) => {\n//       if (measure > highestMeasure) {\n//         mostLikelyResult = filteredResults[i];\n//         highestMeasure = measure;\n//       }\n//     });\n//\n//     return mostLikelyResult;\n//   }\n//   return filteredResults[0];\n// }\n//\n// async function findHypernym(word: string, pos: string, context: [string]) {\n//   const definition = await wordNetDefinition(word, pos, context);\n//   if (definition == null) return null;\n//\n//   const pointer = definition.ptrs.filter(p => p.pointerSymbol === '@')[0];\n//\n//   const result = await wordNet.getAsync(pointer.synsetOffset, pointer.pos);\n//\n//   return result;\n// }\n\nfunction parse(text) {\n  return request.post('http://localhost:5000/parse', {\n    form: {\n      text: text.split(/\\. ?/).join('<#SENT_SEPERATOR#>'),\n    },\n  })\n  .then(res => JSON.parse(res));\n}\n\nfunction find(object, condition) {\n  if (condition(object)) return object;\n\n  if (!object || !object.modifiers || object.modifiers.length === 0) return null;\n  for (const child of object.modifiers) {\n    const result = find(child, condition);\n    if (result) return result;\n  }\n  return null;\n}\n\nfunction findAll(object, condition) {\n  console.log(object);\n  let found = [];\n  if (condition(object)) found.push(object);\n\n  if (!object || !object.modifiers || object.modifiers.length === 0) return found;\n\n  for (const child of object.modifiers) {\n    const result = findAll(child, condition);\n    if (result.length) found = [...result, ...found];\n  }\n  console.log(found);\n  return found;\n}\n\n// From an array of booleans decide the final value\nfunction decide(values) {\n  if (values.length === 0) return null;\n\n  let average = 0;\n  for (const value of values) {\n    average += Number(value);\n  }\n  return average / values.length >= 0.5;\n}\n\n// Finds the existance of property. Returns string of 'required', 'optional', 'unknown'\nfunction findRequired(prop, context) {\n  // console.log(prop);\n  // https://en.wikipedia.org/wiki/Auxiliary_verb\n  const optionalKeywords = ['may', 'might', 'could', 'should', 'maybe', 'possible', 'possibly', 'optionally', 'optional', 'ought'];\n  const requiredKeywords = ['must', 'needs', 'need', 'shall', 'will'];\n\n  const allRequiredInformation = [];\n\n  // Find if the relationship has monads attached\n  if (!context.modifiers || !context.modifiers.length) return false;\n  const monads = context.modifiers.filter(o => o.arc === 'aux');\n\n  for (const monad of monads) {\n    if (optionalKeywords.find(k => k === monad.lemma)) {\n      allRequiredInformation.push(false);\n    } else if (requiredKeywords.find(k => k === monad.lemma)) {\n      allRequiredInformation.push(true);\n    }\n  }\n\n  return decide(allRequiredInformation);\n}\n\n\nfunction findMultiple(prop) {\n  const determiners = prop.modifiers.filter(o => o.arc === 'det');\n  const adjModifiers = prop.modifiers.filter(o => o.arc === 'amod');\n  const numModifiers = prop.modifiers.filter(o => o.arc === 'nummod');\n\n  const combined = determiners.concat(adjModifiers).concat(numModifiers);\n  // console.log(prop.lemma, ' findupper ', combined);\n\n  // If the noun is plural then it will be multiple\n  if (prop.POS_fine === 'NNS') {\n    return true;\n  }\n\n  // Find all information related to upper bound\n  const allCardinalityInfo = [];\n  for (const modifier of combined) {\n    const singleKeywords = ['a', 'single', 'one'];\n    const multipleKeywords = ['many', 'multiple', 'several'];\n    // const singleNumbers = ['one', 'zero'];\n\n    if (modifier.arc === 'nummod') {\n      const number = parseInt(modifier.lemma, 10);\n      if (!isNaN(number)) {\n        if (number > 1) {\n          allCardinalityInfo.push(true);\n        } else {\n          allCardinalityInfo.push(false);\n        }\n      } else if (modifier.lemma === 'one' || modifier.lemma === 'zero') {\n        allCardinalityInfo.push(false);\n      } else {\n        allCardinalityInfo.push(true);\n      }\n    }\n\n    if (singleKeywords.find(k => k === modifier.lemma)) {\n      allCardinalityInfo.push(false);\n    } else if (multipleKeywords.find(k => k === modifier.lemma)) {\n      allCardinalityInfo.push(true);\n    }\n  }\n\n  return decide(allCardinalityInfo);\n}\n\nfunction propertyName(prop, relationship, multiple) {\n  let entity = '';\n\n\n  const correctedNoun = multiple ?\n    compromise.noun(prop.lemma).pluralize() :\n    compromise.noun(prop.lemma).singularize();\n\n  const compounds = findAll(prop, m => m.arc === 'compound');\n\n  if (compounds.length) {\n    entity = `${compounds.map(c => c.lemma).join('_')}_${correctedNoun}`;\n  } else {\n    entity = correctedNoun;\n  }\n\n  if (relationship.lemma === 'have') {\n    return entity;\n  }\n\n  const presentVerb = compromise.verb(relationship.word).to_present();\n\n  return `${presentVerb}_${entity}`;\n}\n\nconst capitalizeWord = str => str.charAt(0).toUpperCase() + str.slice(1);\n\nfunction propertyType(prop, entities = []) {\n  for (const entity of entities) {\n    if (entity.raw === prop.raw || entity.lemma === prop.lemma) {\n      return capitalizeWord(entity.lemma);\n    }\n  }\n\n  return 'string';\n}\n\nfunction categoriseProp(prop, context, relationship, entities) {\n  const hasMultiple = findMultiple(prop);\n  return {\n    type: propertyType(prop, entities),\n    name: propertyName(prop, relationship, hasMultiple),\n    raw: prop.word,\n    lemma: prop.lemma,\n    required: findRequired(prop, context),\n    multiple: hasMultiple,\n  };\n}\n\nfunction getConjuctions(object) {\n  if (!object || !object.modifiers || object.modifiers.length === 0) return [];\n\n  const [conjunction] = object.modifiers.filter(o => o.arc === 'conj');\n  const deeperConjuctions = getConjuctions(conjunction);\n\n  if (deeperConjuctions.length) {\n    return [\n      conjunction,\n      ...deeperConjuctions,\n    ];\n  }\n  if (conjunction) {\n    return [conjunction];\n  }\n  return [];\n}\n\nfunction postprocess(modelStructure, entities) {\n  for (const models of modelStructure) {\n    for (const prop of models.properties) {\n      prop.type = propertyType(prop, entities);\n      console.log('postprocess', propertyType(prop, entities));\n    }\n  }\n}\n\nasync function generateModelStructure(text) {\n  // Annotate raw text with POS and get dependency structure\n  const parseResult = await parse(text);\n  const modelStructure = [];\n  let allEntities = [];\n\n  // Useful transformations\n  // Remove oxford comma!\n\n  for (const sentenceResult of parseResult.data) {\n    // Find potential entities\n    // const potentialEntities = sentenceResult.parse_list\n      // .filter(word => word.POS_coarse === 'NOUN');\n\n    // Find relationships\n    const potentialRelationships = sentenceResult.parse_list\n      .filter(word => word.POS_coarse === 'VERB');\n\n    // Id each word\n\n    // TODO Fix duplicates\n    // Build up tree of words to their place in parse tree\n    const tokens = sentenceResult.tokens;\n    const treeIndex = {};\n    tokens.forEach((token) => {\n      treeIndex[token] = find(sentenceResult.parse_tree[0], obj => obj.word === token);\n    });\n\n    for (const relationship of potentialRelationships) {\n      // First containment\n      const inTree = treeIndex[relationship.word];\n\n      // Find subject and object\n      const [subject] = inTree.modifiers.filter(o => o.arc === 'nsubj');\n      const [object] = inTree.modifiers.filter(o => o.arc === 'dobj');\n\n      let properties = [];\n      if (object) {\n        // This is the properties\n        properties = [object, ...getConjuctions(object)];\n      }\n      let entities = [];\n      if (subject) {\n        // This is entities\n        entities = [subject, ...getConjuctions(subject)];\n        allEntities = [...allEntities, ...entities];\n      }\n\n      const propertiesWithTypes = [];\n      for (const property of properties) {\n        propertiesWithTypes.push(categoriseProp(property, inTree, relationship, entities));\n      }\n\n      for (const entity of entities) {\n        const existingEntity = modelStructure.find(s => s.name === entity.lemma);\n\n        if (existingEntity) {\n          existingEntity.properties = existingEntity.properties.concat(propertiesWithTypes);\n        } else {\n          modelStructure.push({\n            name: entity.lemma,\n            raw: entity.word,\n            properties: propertiesWithTypes,\n          });\n        }\n      }\n    }\n  }\n\n  postprocess(modelStructure, allEntities);\n  return modelStructure;\n\n  // return;\n  //\n  // // TODO Spellcheck\n  // const sentences = seperateSentences(text);\n  // // const structure = {};\n  // //\n  // for (const [, sentence] of sentences.entries()) {\n  //   tokenize(sentence);\n  // }\n  //\n  // // Find entities (nouns)\n  // const sentenceA = parse('A pet has a name, two breeds, multiple toys,\n  //  less than five friends, and many owners.');\n  // console.log(sentenceA);\n  // console.log(`Analysing \"${sentenceA.text}\"`);\n  // console.log('Finding entities');\n  // const potentialEntities = sentenceA.parse_list\n  //   .filter(word => word.POS_coarse === 'NOUN');\n  // console.log(potentialEntities);\n  //\n  // // Find relationships between entities (verbs) and properties of relationships\n  // console.log('Finding relationships');\n  // console.log('Finding verbs');\n  // const potentialRelationship = sentenceA.parse_list\n  //   .filter(word => word.POS_coarse === 'VERB');\n  // console.log(potentialRelationship);\n  //\n  // // Id each word\n  // function find(object: { modifiers: [any] }, condition: Function) {\n  //   if (condition(object)) return object;\n  //\n  //   if (!object.modifiers || object.modifiers.length === 0) return null;\n  //   for (const child of object.modifiers) {\n  //     const result = find(child, condition);\n  //     if (result) return result;\n  //   }\n  //   return null;\n  // }\n  // // TODO Fix duplicates\n  // console.log('Build up tree');\n  // const tokens = sentenceA.tokens;\n  // const treeIndex = {};\n  // tokens.forEach((token) => {\n  //   treeIndex[token] = find(sentenceA.parse_tree[0], obj => obj.word === token);\n  // });\n  //\n  // console.log(treeIndex);\n  //\n  // function getConjuctions(object) {\n  //   if (!object || !object.modifiers || object.modifiers.length === 0) return [];\n  //\n  //   const [conjunction] = object.modifiers.filter(o => o.arc === 'conj');\n  //   const deeperConjuctions = getConjuctions(conjunction);\n  //\n  //   if (deeperConjuctions.length) {\n  //     return [\n  //       conjunction,\n  //       ...deeperConjuctions,\n  //     ];\n  //   }\n  //   if (conjunction) {\n  //     return [conjunction];\n  //   }\n  //   return [];\n  // }\n  //\n  // const result = {};\n  //\n  // function findRequired() {\n  //   // console.log(prop);\n  //   return {\n  //     lessThan: false,\n  //     equal: false,\n  //     moreThan: true,\n  //     quantity: 1,\n  //   };\n  // }\n  //\n  // function findMultiple(prop) {\n  //   const determiners = prop.modifiers.filter(o => o.arc === 'det');\n  //   const adjModifiers = prop.modifiers.filter(o => o.arc === 'amod');\n  //   const numModifiers = prop.modifiers.filter(o => o.arc === 'nummod');\n  //\n  //   const combined = determiners.concat(adjModifiers).concat(numModifiers);\n  //   console.log(prop.lemma, ' findupper ', combined);\n  //\n  //   // Find all information related to upper bound\n  //   // const allCardinalityInfo = [];\n  //   // for (const modifier of combined) {\n  //   //   const singleKeywords = ['a', 'single', 'one'];\n  //   //   const multipleKeywords = ['many', 'multiple'];\n  //   //\n  //   //   if (o.arc === 'nummud') {\n  //   //\n  //   //   }\n  //   // }\n  //\n  //   return {\n  //     lessThan: true,\n  //     equal: false,\n  //     moreThan: false,\n  //     quantity: 1,\n  //   };\n  // }\n  //\n  // function categoriseProp(prop) {\n  //   return {\n  //     type: 'string',\n  //     name: prop.lemma,\n  //     lowerBound: findRequired(prop),\n  //     upperBound: findMultiple(prop),\n  //   };\n  // }\n  //\n  // potentialRelationship.forEach((rel) => {\n  //   // TODO Broaden scope of 'have'\n  //   if (rel.lemma === 'have') {\n  //     const inTree = treeIndex[rel.word];\n  //     console.log(inTree);\n  //\n  //     // Find subject\n  //     const [subject] = inTree.modifiers.filter(o => o.arc === 'nsubj');\n  //     const [object] = inTree.modifiers.filter(o => o.arc === 'dobj');\n  //\n  //     let properties = [];\n  //     if (object) {\n  //       // This is properties\n  //       properties = [object, ...getConjuctions(object)].map(w => w);\n  //     }\n  //     let entities = [];\n  //     if (subject) {\n  //       // This is entities\n  //       entities = [subject, ...getConjuctions(subject)].map(w => w.lemma);\n  //     }\n  //\n  //     const propertiesWithTypes = {};\n  //\n  //     properties.forEach((prop) => {\n  //       propertiesWithTypes[prop.lemma] = categoriseProp(prop);\n  //     });\n  //\n  //     for (const entity of entities) {\n  //       if (result[entity]) {\n  //         result[entity] = result[entity].concat(propertiesWithTypes);\n  //       } else {\n  //         result[entity] = propertiesWithTypes;\n  //       }\n  //     }\n  //   }\n  // });\n  //\n  // console.log('\\n\\n', result, '\\n\\n');\n\n  // check if relationship is containment\n\n\n  // Look through entity types if there are instances involved (Use wordnet hypernyms for this)\n\n  // Find quantities of each relationship from multiple and existance\n\n  // Get facts from information\n\n  // Combine facts\n\n  // Construct structure in the form\n  // {\n  //   entity: {\n  //     attribute: {\n  //       name: string,\n  //       type: string,\n  //       lowerBound: {\n  //         lessThan: boolean,\n  //         equal: boolean,\n  //         moreThan: boolean,\n  //         quantity: 1,\n  //       },\n  //       upperBound: {\n  //         lessThan: boolean,\n  //         equal: boolean,\n  //         moreThan: boolean,\n  //         quantity: 1,\n  //       },\n  //     },\n  //   },\n  // }\n\n  // return Promise.resolve({\n  //   raw: text,\n  // });\n}\n\n\nconst Natural = {\n  seperateSentences,\n  tokenize,\n  generateModelStructure,\n  findPartsOfSpeech,\n  parse,\n};\n\nexport default Natural;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/natural.js","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 9\n// module chunks = 0","module.exports = require(\"natural\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"natural\"\n// module id = 10\n// module chunks = 0","module.exports = require(\"nlp_compromise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"nlp_compromise\"\n// module id = 11\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"pos\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pos\"\n// module id = 13\n// module chunks = 0","module.exports = require(\"request-promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"request-promise\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"sbd\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sbd\"\n// module id = 15\n// module chunks = 0","module.exports = require(\"sequelize\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sequelize\"\n// module id = 16\n// module chunks = 0"],"sourceRoot":""}